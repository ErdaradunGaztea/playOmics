---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=FALSE} 
library(parallel) # for parallel calculations
# library(purrr)
require(tidyverse)
require(factoextra) # for PCA
require(tidymodels)
require(mlr3) # for filtering
require(mlr3filters) # for filtering
require(mlflow) # for experiment tracking
# install_mlflow()
require(carrier) # for experiment tracking
require(parallel)
require(ggupset)
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 

file.sources <- list.files("R", full.names = T)
sapply(file.sources,source)
```


```{r}
brca_data_w_meta <- 
  read_csv("~/code/test_data/QLattice_data/brca_data_w_meta.csv") %>% 
  add_column(id = 1:nrow(.), .before = 1)
# vital.status
# patient.clinical.cqcf.histological.type -> "infiltrating ductal carcinoma","infiltrating lobular carcinoma"
```

```{r}
data.frame(
  columns = names(brca_data_w_meta)
) %>% 
  separate(columns, c("dataset", "feat_name"), "_") %>% 
  count(dataset)
 # cn - copy number variations
# mu - somatic mutations
# rs - RNASeq (gene expressions)
# pp - protein expressions
```

# Splitting data

```{r}
clinical_data <- 
  brca_data_w_meta %>% 
  transmute(id, vital.status, patient.clinical.cqcf.histological.type = as.numeric(if_else(patient.clinical.cqcf.histological.type == "infiltrating ductal carcinoma", 1, 2))) 

copy_number <-
  brca_data_w_meta %>% 
  select(id, starts_with("cn_"))

somatic_mutations <-
  brca_data_w_meta %>% 
  select(id, starts_with("mu_"))

rnaseq <-
  brca_data_w_meta %>% 
  select(id, starts_with("rs_"))

proteins <-
  brca_data_w_meta %>% 
  select(id, starts_with("pp_"))

data <- connect_datasets(clinical_data, copy_number, somatic_mutations, rnaseq, proteins)

target <-
  define_target(phenotype_df = "clinical_data",
              target_variable = "vital.status",
              id_variable = "id",
              positive_class_indication = "1")

data_prepared <-
  prepare_data_for_modelling(data = data, target = target)

data_filtered <- 
  nested_filtering(data_prepared[-1], target, filter_name = "auc", n_threads = 10)
```

```{r}
small_models <-
  create_multiple_models(data_filtered, "qlattice_brca_experiment_top10", n_cores = 20)

small_models <-
  create_multiple_models(data_filtered, "qlattice_brca_res_test2", n_cores = 5)
```

```{r}
experiment_name <- "qlattice_brca_experiment_top10"
results <- see_metrics_for_all_data(experiment_name)
```
# RS only

```{r}
target <-
  define_target(phenotype_df = "clinical_data",
              target_variable = "vital.status",
              id_variable = "id",
              positive_class_indication = "1")

data_prepared <-
  prepare_data_for_modelling(data = data[c(1,4)], target = target)

data_filtered <- 
  nested_filtering(data_prepared[-1], target, filter_name = "auc", n_threads = 10)
```
```{r}
create_multiple_models(data_filtered, "qlattice_brca_experiment_rna_only", n_cores = 20)
```

```{r}
experiment_name <- "qlattice_brca_experiment_rna_only"
results <- see_metrics_for_all_data(experiment_name)
results <- results %>% mutate_at(names(results)[-c(1,15:16)], as.numeric)
results_all <- results
results <- results_all %>% slice_max(mcc, n= 10)
```

# Extract one model from LM:

```{r}
mymodel <- mlflow_load_model("/home/rstudio/code/paczka_R/qlattice_brca_experiment_rna_only/mlflow/0/422a39fed82042f89e47cd50987d7cc2/artifacts/model")
mlflow_predict(mymodel, mydata)
```
# Repeated:

New settings - normalized features + SMOTE 0.5

```{r}
create_multiple_models(data_filtered, "qlattice_brca_experiment_rna_repeated_test9", n_cores = 20)
experiment_name <- "qlattice_brca_experiment_rna_repeated_test9"
results_repeated <- see_metrics_for_all_data(experiment_name)
results_repeated <- results_repeated %>% mutate_at(names(results_repeated)[-c(1,15:16)], as.numeric)
results <- results_repeated %>% arrange(desc(mcc)) 
results_GUI(results)
```

# SVM:

```{r}
mydata <- readRDS(results$data[1])
mydata2 <- mydata %>% select(rs_OGN, rs_C6, vital.status)
```

```{r}
names(mydata)
```


```{r}
# lapply(1:5, function(i){
  ggplot(mydata, aes(rs_OGN, rs_C6, color = vital.status)) +
  geom_point()
# })

```


## Linear

```{r}
svm_linear_spec <- svm_poly(degree = 1) %>%
  set_mode("classification") %>%
  set_engine("kernlab", scaled = FALSE)

svm_linear_fit <- svm_linear_spec %>% 
  set_args(cost = 10) %>%
  fit(vital.status ~ ., data = mydata2)

svm_linear_fit

augment(svm_linear_fit, new_data = mydata) %>%
  conf_mat(truth = vital.status, estimate = .pred_class)
```

```{r}
library(kernlab)
svm_linear_fit %>%
  extract_fit_engine() %>%
  plot()
```

## Non-linear

```{r}
svm_rbf_spec <- svm_rbf() %>%
  set_mode("classification") %>%
  set_engine("kernlab")

svm_rbf_fit <- svm_rbf_spec %>%
  fit(vital.status ~ ., data = mydata2)

svm_rbf_fit %>%
  extract_fit_engine() %>%
  plot()

augment(svm_rbf_fit, new_data = mydata2) %>%
  conf_mat(truth = vital.status, estimate = .pred_class)
```
### Add more data using SMOTE

```{r}
mydata3 <-
recipe(vital.status ~ ., data = mydata2) %>%
  themis::step_smote(vital.status, over_ratio = 0.5) %>% # nrow form minority class - at least 50% of nrow majority class 
  prep() %>%
  bake(new_data = NULL)
```

```{r}
svm_rbf_spec <- svm_rbf() %>%
  set_mode("classification") %>%
  set_engine("kernlab")

svm_rbf_fit <- svm_rbf_spec %>%
  fit(vital.status ~ ., data = mydata3)

svm_rbf_fit

svm_rbf_fit %>%
  extract_fit_engine() %>%
  plot()

augment(svm_rbf_fit, new_data = mydata3) %>%
  conf_mat(truth = vital.status, estimate = .pred_class)
```

